LOCAL WORKING
**************
working tree
staging area
local repo
commit
branch
tag
finging changes
modify
cherry pick
rebase
stash

***************
setup local repository
***************
Git to maintain history needs to know your 
username
git config --global user.name "koticoder"
email id
git config --global user.email "abc@gmail.com"

***************
CREATE A NEW FOLDER AND INITIALIZE A GET REPOSITORY
***************
git init

***************
CREATE A NEW FILE
***************
touch 1.txt

**********************
**********************
>created two files 
>worked in single file
>added both files to staged area
>but dont want to commit the unused file
 1. you can add only the used file staged area
 2. once you added all files you can restore the unused file from staged area
	//git restore --staged <filename>
>if you see the git status the unused file will be untracked
>now to remove all untracked files
	//git clean -fd
>to remove all changes in working tree 
means you want to delete the changes made from last commit
	//git reset --hard
>check the git log
*********************
*********************
GIT TREATS CHANGES ONLY WHEN THEY ARE MADE IN FILES
EMPTY FOLDERS ARENOT CONSIDERED AS CHANGES IN GIT
*********************


ADDING CHANGES TO WORKING TREE TO STAGING AREA
>add all changes in complete repo //git add -A
>add specific change // git add <path>
>add all changes wrt to current directory // git add .
>add only modified changes // git add -u
*********************	
***********
BRANCHES
***********
>branch represent an independent line of development
>you can think as a way to request a brand new working dir,staging area, project history
>new commits are recorded in the history for the current branch
>by default git will have branch called as main
>branch always points to latest commit
>changes from one branch can be merged to other branch
************
COMMANDS
************
>list all branches in you repositoy // git branch
>create new branch but not checkout to new branch // git branch <branch>
>deleting branch //git branch -d <branch>
>force delete branch if it has unmerged changes // git branch -D <branch>
>rename the current branch // git branch -m <branch>
>list all remote branches // git branch -a



















